{"ast":null,"code":"import React from 'react';","map":{"version":3,"sources":["C:/Users/user/Desktop/recipes/src/screens/Search/SearchScreen.js"],"names":["React"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB","sourcesContent":["import React from 'react';\n/*import {\n  FlatList,\n  Text,\n  View,\n  Image,\n  TouchableHighlight\n} from 'react-native';\nimport styles from './styles';\nimport { ListItem, SearchBar } from 'react-native-elements';\nimport MenuImage from '../../components/MenuImage/MenuImage';\nimport {\n  getCategoryName,\n  getRecipesByRecipeName,\n  getRecipesByCategoryName,\n  getRecipesByIngredientName\n} from '../../data/MockDataAPI';\n\nexport default class SearchScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const { params = {} } = navigation.state;\n    return {\n      headerRight: (\n        <MenuImage\n          onPress={() => {\n            navigation.openDrawer();\n          }}\n        />\n      ),\n      headerTitle: (\n        <SearchBar\n          containerStyle={{\n            backgroundColor: 'transparent',\n            borderBottomColor: 'transparent',\n            borderTopColor: 'transparent',\n            flex: 1\n          }}\n          inputContainerStyle={{\n            backgroundColor: '#EDEDED'\n          }}\n          inputStyle={{\n            backgroundColor: '#EDEDED',\n            borderRadius: 10,\n            color: 'black'\n          }}\n          searchIcond\n          clearIcon\n          //lightTheme\n          round\n          onChangeText={text => params.handleSearch(text)}\n          placeholder=\"Search\"\n          value={params.data}\n        />\n      )\n    };\n  };    \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    navigation.setParams({\n      handleSearch: this.handleSearch,\n      data: this.getValue\n    });\n  }\n\n  handleSearch = text => {\n    var recipeArray1 = getRecipesByRecipeName(text);\n    var recipeArray2 = getRecipesByCategoryName(text);\n    var recipeArray3 = getRecipesByIngredientName(text);\n    var aux = recipeArray1.concat(recipeArray2);\n    var recipeArray = [...new Set(aux)];\n    if (text == '') {\n      this.setState({\n        value: text,\n        data: []\n      });\n    } else {\n      this.setState({\n        value: text,\n        data: recipeArray\n      });\n    }\n  };\n\n  getValue = () => {\n    return this.state.value;\n  };\n\n  onPressRecipe = item => {\n    this.props.navigation.navigate('Recipe', { item });\n  };\n\n  renderRecipes = ({ item }) => (\n    <TouchableHighlight underlayColor='rgba(73,182,77,1,0.9)' onPress={() => this.onPressRecipe(item)}>\n      <View style={styles.container}>\n        <Image style={styles.photo} source={{ uri: item.photo_url }} />\n        <Text style={styles.title}>{item.title}</Text>\n        <Text style={styles.category}>{getCategoryName(item.categoryId)}</Text>\n      </View>\n    </TouchableHighlight>\n  );\n\n  render() {\n    return (\n      <View>\n        <FlatList\n          vertical\n          showsVerticalScrollIndicator={false}\n          numColumns={2}\n          data={this.state.data}\n          renderItem={this.renderRecipes}\n          keyExtractor={item => `${item.recipeId}`}\n        />\n      </View>\n    );\n  }\n\n\n}*/\n"]},"metadata":{},"sourceType":"module"}